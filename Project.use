model BookingSys

-- main control class

class BookingSystem
  attributes 
    date : Date
  
  operations      
    selectBooking(tno: Integer, hr: Integer, mn: Integer)
    begin      
        for r in self.current do
            if (r.table.tno = tno and r.getTime() = hr*60+mn) then
                insert(self,r) into Selected                
            end
        end
    end
    
    unSelectBooking()
    
    recordArrival(hr: Integer, mn: Integer)
    begin
        declare t: Time;
        t := new Time; 
        t.setTime(hr, mn);
        self.selected.setArrivalTime(t);
        WriteLine('Customer has just been seated ');
        self.selected.showDetails()
    end
	
	cancel()
	begin
		 WriteLine('Customer has cancelled the selected reservation');
		 destroy self.selected
	end
    
    statemachines
        psm States
        states                        
            newBooking : initial
            notSelected
            selected
        transitions
            newBooking ->  notSelected  { create }
            notSelected -> selected { selectBooking() }
            selected -> selected { [self.selected.table.covers >= self.selected.covers] recordArrival() }
            selected -> selected { selectBooking() }
        end


end


class Booking
  attributes
    covers : Integer
    date : Date
    time : Time
    payment : Cash
    cardpayment : Card
  operations
    setArrivalTime(t: Time)
    begin
    end
    
    showDetails()
    begin
    end
    
    setTime(t : Time)
    begin
        self.time := t
    end
    
    -- A query operation to retun the time of the booking in minutes
    getTime() : Integer = time.getTime()
end

class WalkIn < Booking
  attributes
    arrivalTime : Time
  operations
    recordArrival()
    begin
      Write('Selected walkin is by');
    
    end

  setArrivalTime(t: Time)
    begin
        self.arrivalTime := t
    end
    

    statemachines
		psm States
		states
			newWalkIn : initial
			waiting
			seated
		transitions
			newWalkIn -> waiting { create }
			waiting -> seated { recordArrival() }
		end

end


class Reservation < Booking
  attributes
    arrivalTime : Time
  operations
    showDetails()
    begin
        Write('Selected reservation is by ');
        WriteLine(self.customer.name)
    end
    
    setArrivalTime(t: Time)
    begin
        self.arrivalTime := t
    end
    
    setCustomer( c : Customer) 
    begin
        insert(c, self) into Makes        
    end
	
	statemachines
		psm States
		states
			newReservation : initial
			waiting
			seated
		transitions
			newReservation -> waiting { create }
			waiting -> seated { setArrivalTime() }
		end
end

class Customer
  attributes
    name : String
    phoneNumber : String
end


class Table 
  attributes
    tno : Integer
    covers : Integer
    
end
   
class Cash
  attributes
    euro : Integer
    cents : Integer
end

class Card
  attributes
    pin : Integer
  end

   
class Date
  attributes
    day : Integer
    month : Integer
    year : Integer
end

class Time
  attributes
    hour : Integer
    min : Integer
  operations
    setTime(h: Integer, m: Integer)
    begin
        self.hour := h;
        self.min := m
    end 
    
    -- a query method to return the time since midnight in minutes
    getTime() : Integer = self.hour*60 + self.min      
end   

association IsAt between 
    Booking[*] role bookings
    Table[1]
end

association Makes between
    Customer[1]
    Reservation[*] role reservations
end

association Arrive between
    Customer[1]
    WalkIn[*] role WalkIns
end

association Pays between
    Customer[1]
    Cash[*] role payment
    
end

--association PayCard between
    --Customer[1]
    --Card[*] role payment
--end


association Contains between
    BookingSystem[1] role bs
    Booking[*] role current
end

association Selected between
    BookingSystem[1] role bsys
    Booking[0..1] role selected
end


constraints
-- please exprees the contraint that no two bookings for a given
-- table can overlap

context BookingSystem::recordArrival(hr: Integer, mn: Integer)
    pre arrivalBeforeBooking: self.selected.getTime() <= mn + hr*60


class PaymentSystem
    attributes 
        cash : Cash
        card : Card
    
    operations      
        selectPayment(booking: Booking, cashAmount: Integer, cardPin: Integer)
        begin      
            if (cashAmount > 0) then
              self.cash.euro := cashAmount;
              self.cash.cents := 0;
              booking.payment := self.cash;             
            end;

            if (cardPin > 0) then
                self.card.pin := cardPin;
                booking.cardpayment := self.card;
            end;

            WriteLine('Payment processed sucessfully!');
        end
end

