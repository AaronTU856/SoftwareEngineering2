-- Aniket Bedade C22448826
-- Aaron Baggot C22716399
model BookingSys

-- main control class

class BookingSystem
  
  operations      
    selectBooking(tno : Integer, hr : Integer, mn : Integer)
    begin      
      for r in self.current do
        if (r.table.tno = tno and r.getTime() = hr*60+mn) then
          insert(self,r) into Selected                
        end
      end
    end

    unSelectBooking()
    begin
      delete (self,self.selected) from Selected
    end
    
    recordArrival(hr : Integer, mn : Integer)
    begin
      declare t: Time;
      t := new Time; 
      t.setTime(hr, mn);
      self.selected.setArrivalTime(t);
      WriteLine('Customer has just been seated ');
      self.selected.showDetails()
    end

    cancelReservation()
    begin
      Write('The booking made by ');
      self.selected.getCustomerName();
      WriteLine(' was cancelled');
      destroy self.selected
    end

    changeTable(r : Reservation, table : Table)
    begin
      if (table.checkAvailability(r.time)) then
        delete (r, r.table) from IsAt;
        insert(r, table) into IsAt
      else
        WriteLine('Table is not Available')
      end
    end
	
    -- version of cancel not defined in SOIL
    cancel(r : Reservation)

  statemachines
    psm States
    states                        
      newBooking : initial
      notSelected
      selected
    transitions
      newBooking ->  notSelected  { create }
      notSelected -> selected { selectBooking() }
      selected -> selected { [self.selected.table.covers >= self.selected.covers] recordArrival() }
      selected -> selected { selectBooking() }
      selected -> notSelected { unSelectBooking() }
      selected -> notSelected { cancelReservation() }
      notSelected -> notSelected { cancel() }
    end
  end


class Booking
  attributes
    covers : Integer
    time : Time

  operations
    setArrivalTime(t: Time)
    begin
    end
    
    showDetails()
    begin
    end

    getCustomerName()
    begin
    end

    setCovers(cv : Integer)
    begin
      self.covers := cv
    end

    setTime(t : Time)
    begin
      self.time := t
    end 

    -- A query operation to retun the time of the booking in minutes
    getTime() : Integer = time.getTime()
end

class Receptionist
  operations
    greetWalkIn(covers : Integer, hr : Integer, min : Integer)
    begin
      declare w : WalkIn, t : Time;
      t := new Time;
      t.setTime(hr, min);

      w := new WalkIn;
      w.setCovers(covers);
      w.setTime(t);

      insert(self, w) into Talking;

      WriteLine('Welcome! You will be seated in a moment.')
    end

    seatWalkIn()
    begin
      declare run : Boolean;
      run := true;
      for tb in self.table do
        if (run and tb.checkAvailability(self.current.time) and self.current.covers <= tb.covers) then
          insert(self.current, tb) into IsAt;
          self.current.seated();
          WriteLine('Please have a seat here');
          delete(self, self.current) from Talking;
          run := false
        end
      end;

      if (run) then
        WriteLine('Im sorry, there are no tables available.');
        self.current.notSeated();
        destroy self.current
      end
    end
end

class WalkIn < Booking

  -- dummy operations to change states in statemachine
  operations
  seated()
  begin
  end

  notSeated()
  begin
  end

  statemachines
  psm States
  states
    newWalkIn : initial
    waiting
    seated
    left
  transitions
    newWalkIn -> waiting { create }
    waiting -> seated { seated() }
    waiting -> left { notSeated() }
  end
end


class Reservation < Booking
  attributes
    arrivalTime : Time
  operations
    showDetails()
    begin
      Write('Selected reservation is by ');
      WriteLine(self.customer.name)
    end
    
    setArrivalTime(t : Time)
    begin
      self.arrivalTime := t
    end
    
    setCustomer(c : Customer) 
    begin
      insert(c, self) into Makes        
    end

    getCustomerName()
    begin
      Write(self.customer.name)
    end
	
	statemachines
		psm States
		states
			newReservation : initial
			waiting
			seated
		transitions
			newReservation -> waiting { create }
			waiting -> seated { setArrivalTime() }
		end
end


class Customer
  attributes
    name : String
    age : Integer
    phoneNumber : String
  operations
    makeReservation(covers : Integer, table : Table, bookingHr : Integer, bookingMin : Integer)
    begin
      declare time : Time, r : Reservation;
      time := new Time;
      time.setTime(bookingHr, bookingMin);

      if (table.checkAvailability(time)) then
        r := new Reservation;
        r.setCovers(covers);
        r.setTime(time);
        r.setCustomer(self);

        -- add the new reservation to the BookingSystem
        insert(self.bs, r) into Contains;
        insert(r, table) into IsAt;

        WriteLine('Reservation made successfully.')
      else
        -- delete the new Time object
        WriteLine('Table is not available.');
        destroy time
      end
    end
end


class Table 
  attributes
    tno : Integer
    covers : Integer

  operations
    -- query operation to check if table is free
    checkAvailability(t : Time) : Boolean = self.bookings->size() = 0 or self.bookings->forAll(b | b.getTime() + 120 <= t.getTime() or t.getTime() + 120 <= b.getTime())
end


class Time
  attributes
    hour : Integer
    min : Integer
  operations
    setTime(h: Integer, m: Integer)
    begin
      self.hour := h;
      self.min := m
    end 
    
    -- a query method to return the time since midnight in minutes
    getTime() : Integer = self.hour*60 + self.min      
end   

association IsAt between 
  Booking[*] role bookings
  Table[1]
end

association Makes between
  Customer[1]
  Reservation[*] role reservations
end

association Talking between
  Receptionist[1]
  WalkIn[1] role current
end

association Checks between
  Receptionist[1]
  Table[*]
end

association Contains between
  BookingSystem[1] role bs
  Booking[*] role current
end

association Selected between
  BookingSystem[1] role bsys
  Booking[0..1] role selected
end

association Uses between
  BookingSystem[1] role bs
  Customer[1]
end


constraints

context BookingSystem::recordArrival(hr: Integer, mn: Integer)
  pre arrivalBeforeBooking: self.selected.getTime() <= mn + hr*60

context BookingSystem::cancel(r : Reservation)
  pre Pre1: current->includes(r)
  post Post1: current->excludes(r)

context BookingSystem::changeTable(r : Reservation, table : Table)
  pre overNoOfCovers: r.covers <= table.covers
  pre Pre1: r.table->excludes(table)
  post Post1: r.table->includes(table) or not table.checkAvailability(r.time)

context Customer::makeReservation(covers : Integer, table : Table, bookingHr : Integer, bookingMin : Integer)
  pre underageBookingTime: self.age < 18 and bookingHr * 60 + bookingMin < 21 * 60

context Table
  inv noOverlap: self.bookings->forAll(b1, b2 | b1.getTime() + 120 <= b2.getTime() or b2.getTime() + 120 <= b1.getTime())

context BookingSystem
  inv mustBeOneOf: not self.selected.isDefined() or self.current->includes(self.selected)





